From be920572a2d2476018316cb4d3b96fc588b82ae2 Mon Sep 17 00:00:00 2001
From: Abram <israelvictory87@gmail.com>
Date: Thu, 12 Oct 2023 01:59:23 +0100
Subject: [PATCH 1/2] Update - ignored node_modules directory

---
 .gitignore | 25 ++-----------------------
 1 file changed, 2 insertions(+), 23 deletions(-)

diff --git a/.gitignore b/.gitignore
index 4d29575..d2e7982 100755
--- a/.gitignore
+++ b/.gitignore
@@ -1,23 +1,2 @@
-# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
-
-# dependencies
-/node_modules
-/.pnp
-.pnp.js
-
-# testing
-/coverage
-
-# production
-/build
-
-# misc
-.DS_Store
-.env.local
-.env.development.local
-.env.test.local
-.env.production.local
-
-npm-debug.log*
-yarn-debug.log*
-yarn-error.log*
+env/
+node_modules
-- 
2.42.0


From 9a98b755f904d36505cbca8c49c341f93cc49d48 Mon Sep 17 00:00:00 2001
From: Abram <israelvictory87@gmail.com>
Date: Thu, 12 Oct 2023 01:59:45 +0100
Subject: [PATCH 2/2] Enhancement - modified app and graph component

---
 src/App.tsx   |  23 ++++++++---
 src/Graph.tsx | 111 +++++++++++++++++++++++++++++---------------------
 2 files changed, 82 insertions(+), 52 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..5440de1 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,27 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let startTimer = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ data: serverResponds, showGraph: true });
+        console.log("State: ", this.state)
+      });
+    
+      startTimer++;
+      if (startTimer > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..bd67763 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import './Graph.css';
+import React, { Component } from "react";
+import { Table } from "@finos/perspective";
+import { ServerRespond } from "./DataStreamer";
+import "./Graph.css";
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+	data: ServerRespond[];
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+	load: (table: Table) => void;
 }
 
 /**
@@ -23,51 +23,70 @@ interface PerspectiveViewerElement {
  * parsed from its parent through data property.
  */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
-  table: Table | undefined;
+	// Perspective table
+	table: Table | undefined;
 
-  render() {
-    return React.createElement('perspective-viewer');
-  }
+	render() {
+		return React.createElement("perspective-viewer");
+	}
 
-  componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+	componentDidMount() {
+		// Get element to attach the table from the DOM.
+		const elem: PerspectiveViewerElement = (document.getElementsByTagName(
+			"perspective-viewer"
+		)[0] as unknown) as PerspectiveViewerElement;
+		console.log("Element: ", elem);
+		elem.setAttribute("view", "y_line");
+		elem.setAttribute("column-pivots", '["stock"]');
+		elem.setAttribute("row-pivots", '["timestamp"]');
+		elem.setAttribute("columns", '["top_ask_price"]');
+    elem.setAttribute(
+      "aggregates",
+      `{
+          "stock": "discount count", 
+          "top_ask_price": "avg", 
+          "top_bid_price": "avg", 
+          "timestamp": "discount count"
+      }`
+  );
+  
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+		const schema = {
+			stock: "string",
+			top_ask_price: "float",
+			top_bid_price: "float",
+			timestamp: "date",
+		};
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+		if (window.perspective && window.perspective.worker()) {
+			this.table = window.perspective.worker().table(schema);
+		}
+		if (this.table) {
+			// Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
-    }
-  }
+			// Add more Perspective configurations here.
+			elem.load(this.table);
+		}
+	}
 
-  componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
-    }
-  }
+	componentDidUpdate() {
+		// Everytime the data props is updated, insert the data into Perspective table
+		if (this.table) {
+			// As part of the task, you need to fix the way we update the data props to
+			// avoid inserting duplicated entries into Perspective table again.
+			this.table.update(
+				this.props.data.map((el: any) => {
+					// Format the data from ServerRespond to the schema
+					return {
+						stock: el.stock,
+						top_ask_price: (el.top_ask && el.top_ask.price) || 0,
+						top_bid_price: (el.top_bid && el.top_bid.price) || 0,
+						timestamp: el.timestamp,
+					};
+				})
+			);
+		}
+	}
 }
 
 export default Graph;
-- 
2.42.0

